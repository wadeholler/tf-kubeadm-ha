# install kubeadm, kubelet kubectl
- hosts: all
  tasks:
#    - name: Run the equivalent of "apt-get update" as a separate step
#      apt:
#        update_cache: yes
    - name:
      apt:
        name: "{{ item }}"
      with_items:
        - apt-transport-https 
        - ca-certificates 
        - curl 
        - software-properties-common
    - name: add docker-ce apt -key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
    - name: add repository
      apt_repository: 
        repo: deb https://download.docker.com/linux/ubuntu xenial stable
        state: present
    - name: install docker
      package:
        name: docker-ce=17.03.2~ce-0~ubuntu-xenial
        state: present
    - name: add kubernetes apt -key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    - name: add repository
      apt_repository:
        repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
    - name: install kubelet kubeadm kubectl
      package:
        name: "{{ item }}"
        state: present
      with_items:
        - kubelet
        - kubeadm
        - kubectl
# create etcd cluster
- hosts: role_etcd
  tasks:
    - name: template new service file
      template:
        src: 20-etcd-service-manager.conf
        dest: /etc/systemd/system/kubelet.service.d/20-etcd-service-manager.conf
      register: kubeletservicefile
      tags:
        - etcd
    - name: restart kubelet
      systemd:
        name: kubelet
        state: restarted
        daemon_reload: yes
      when: kubeletservicefile.changed
      tags:
        - etcd
    - name: template out kubeadmcfg for etcd
      template:
        src: kubeadmcfg.yaml.j2
        dest: /tmp/kubeadmcfg.yaml
      tags:
        - etcd
    - name: check for pre existing ca crt and key
      stat:
        path: /etc/kubernetes/pki/etcd/ca.crt
      register: stat_result
      run_once: true
      tags:
        - etcd
    - name: create the ca.crt and key
      command: kubeadm alpha phase certs etcd-ca
      run_once: true
      when:
        - stat_result.stat.exists == False
      tags:
        - etcd
    - name: fetch the ca crt and key
      fetch:
        src: "{{ item }}"
        dest: /tmp/
        flat: yes
      run_once: true
      with_items:
      - /etc/kubernetes/pki/etcd/ca.crt
      - /etc/kubernetes/pki/etcd/ca.key
      become: yes
      tags:
        - etcd
    - name: mkdir for copy ca crt and key
      file:
        path: /etc/kubernetes/pki/etcd
        state: directory
        recurse: yes
      tags:
        - etcd
    - name: copy ca crt 
      copy:
        src: "/tmp/ca.crt"
        dest: "/etc/kubernetes/pki/etcd/ca.crt"
      tags:
        - etcd
    - name: copy ca key 
      copy:
        src: "/tmp/ca.key"
        dest: "/etc/kubernetes/pki/etcd/ca.key"
      tags:
        - etcd
    - name: run kubeadm against config
      command: "{{ item }} --config=/tmp//kubeadmcfg.yaml"
      with_items:
        - kubeadm alpha phase certs etcd-server 
        - kubeadm alpha phase certs etcd-peer
        - kubeadm alpha phase certs etcd-healthcheck-client
        - kubeadm alpha phase certs apiserver-etcd-client
      tags:
        - etcd
    - name: run kubeadm alphas phase etcd local against config
      command: "{{ item }} --config=/tmp//kubeadmcfg.yaml"
      with_items:
        - kubeadm alpha phase etcd local
      tags:
        - etcd
    - name: fetch the etcd client crt and key
      fetch:
        src: "{{ item }}"
        dest: /tmp/
        flat: yes
      run_once: true
      with_items:
      - /etc/kubernetes/pki/apiserver-etcd-client.crt
      - /etc/kubernetes/pki/apiserver-etcd-client.key
      become: yes
      tags:
        - etcd
      
- hosts: role_master
  vars:
    kubernetes_api_lb_name: internal-kubeadm-tf-elb-1818686531.us-east-1.elb.amazonaws.com
  tasks:
    - name: mkdir for copy ca crt and key
      file:
        path: /etc/kubernetes/pki/etcd
        state: directory
        recurse: yes
      tags:
        - master
    - name: copy ca crt
      copy:
        src: "/tmp/ca.crt"
        dest: "/etc/kubernetes/pki/etcd/ca.crt"
      tags:
        - master
    - name: copy etcd client crt
      copy:
        src: "/tmp/apiserver-etcd-client.crt"
        dest: "/etc/kubernetes/pki/apiserver-etcd-client.crt"
      tags:
        - master
    - name: copy etcd client key
      copy:
        src: "/tmp/apiserver-etcd-client.key"
        dest: "/etc/kubernetes/pki/apiserver-etcd-client.key"
      tags:
        - master
    - name: template kubeadm-config.yaml
      template:
        src: kubeadm-config.yaml.j2
        dest: /tmp/kubeadm-config.yaml
      tags:
        - master
    - name: check if something is listening on 6443
      shell: nc -vz localhost 6443
      run_once: true
      register: master0check6443
      ignore_errors: true
      tags:
        - master
      
    - name: run kubeadm init on first master node
      command: kubeadm init --config /tmp/kubeadm-config.yaml 
      tags:
        - master
      run_once: true
      when: master0check6443.rc != 0

    - name: copy kubeadm init files here
      fetch:
        src: "{{ item }}"
        dest: "/tmp/{{ item }}"
        flat: yes
      with_items:
        - /etc/kubernetes/pki/ca.crt
        - /etc/kubernetes/pki/ca.key
        - /etc/kubernetes/pki/sa.key
        - /etc/kubernetes/pki/sa.pub
        - /etc/kubernetes/pki/front-proxy-ca.crt
        - /etc/kubernetes/pki/front-proxy-ca.key
        - /tmp/kubeadm-config.yaml
      run_once: true
      tags:
         - master

    - name: copy kubeadm init files to other masters
      copy:
        src: "/tmp/{{ item }}"
        dest: "{{ item }}"
      with_items:
        - /etc/kubernetes/pki/ca.crt
        - /etc/kubernetes/pki/ca.key
        - /etc/kubernetes/pki/sa.key
        - /etc/kubernetes/pki/sa.pub
        - /etc/kubernetes/pki/front-proxy-ca.crt
        - /etc/kubernetes/pki/front-proxy-ca.key
      when: inventory_hostname != groups['role_master'][0]
      tags:
         - master

    - name: check if something is listening on 6443 on second master 
      shell: nc -vz localhost 6443
      register: master1check6443
      when: inventory_hostname != groups['role_master'][0]
      ignore_errors: true
      tags:
        - master

    - name: run kubeadm init on other master nodes
      command: kubeadm init --config /tmp/kubeadm-config.yaml
      when: 
        - inventory_hostname != groups['role_master'][0]
        - master1check6443.rc  != 0
      tags:
        - master

    - name: save join command
      command: kubeadm token create --print-join-command
      register: joincommand
      tags:
        - master
 
    - name: save join command locally
      copy:
        content: "{{ joincommand.stdout }}"
        dest: /tmp/joincommand
      delegate_to: localhost
      run_once: true
      tags:
        - master
    - name: save current joined list
      command: kubectl --kubeconfig /etc/kubernetes/admin.conf get nodes | grep -v name
      register: getnodes
      when: 
        - inventory_hostname == groups['role_master'][0]
      tags:
        - master
    - mame: save current joined list locally
      copy:
        content: "{{ getnodes.stdout }}"
        dest: /tmp/getnodes
      delegate_to: localhost
      run_once: true
      tags:
        - master
    
   
- hosts: role_node
  vars:
     getnodescontents: "{{ lookup('/tmp/getnodes', '/etc/foo.txt') }}"
  tasks:
    - name: copy command file to nodes
      copy:
        src: /tmp/joincommand
        dest: /tmp/joincommand
      when: getnodescontents | search("{{ inventory_hostname }}")
      tags:
        - node
    - name: run join command
      command: sh /tmp/joincommand
      when: getnodescontents | search("{{ inventory_hostname }}")
      tags:
        - node  
